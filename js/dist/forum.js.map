{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@blomstra/flag-duplicates/webpack/bootstrap","webpack://@blomstra/flag-duplicates/webpack/runtime/compat get default export","webpack://@blomstra/flag-duplicates/webpack/runtime/define property getters","webpack://@blomstra/flag-duplicates/webpack/runtime/hasOwnProperty shorthand","webpack://@blomstra/flag-duplicates/webpack/runtime/make namespace object","webpack://@blomstra/flag-duplicates/external root \"flarum.core.compat['forum/app']\"","webpack://@blomstra/flag-duplicates/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@blomstra/flag-duplicates/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@blomstra/flag-duplicates/external root \"flarum.core.compat['components/EventPost']\"","webpack://@blomstra/flag-duplicates/external root \"flarum.core.compat['common/components/LoadingIndicator']\"","webpack://@blomstra/flag-duplicates/external root \"flarum.core.compat['common/components/Link']\"","webpack://@blomstra/flag-duplicates/./src/forum/components/DiscussionFlaggedDuplicatePost.js","webpack://@blomstra/flag-duplicates/external root \"flarum.core.compat['common/extend']\"","webpack://@blomstra/flag-duplicates/external root \"flarum.core.compat['flags/forum/components/FlagPostModal']\"","webpack://@blomstra/flag-duplicates/external root \"flarum.core.compat['forum/components/Post']\"","webpack://@blomstra/flag-duplicates/external root \"flarum.core.compat['common/helpers/icon']\"","webpack://@blomstra/flag-duplicates/external assign \"flarum.extensions['fof-merge-discussions']\"","webpack://@blomstra/flag-duplicates/external root \"flarum.core.compat['common/components/Button']\"","webpack://@blomstra/flag-duplicates/external root \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@blomstra/flag-duplicates/external root \"flarum.core.compat['common/Component']\"","webpack://@blomstra/flag-duplicates/external root \"flarum.core.compat['common/utils/withAttr']\"","webpack://@blomstra/flag-duplicates/external root \"flarum.core.compat['forum/states/GlobalSearchState']\"","webpack://@blomstra/flag-duplicates/./src/forum/components/DiscussionSearch.tsx","webpack://@blomstra/flag-duplicates/./src/forum/index.ts","webpack://@blomstra/flag-duplicates/./src/forum/extendFlagModal.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/EventPost'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LoadingIndicator'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Link'];","import app from 'flarum/forum/app';\nimport EventPost from 'flarum/components/EventPost';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport Link from 'flarum/common/components/Link';\n\nexport default class DiscussionFlaggedDuplicatePost extends EventPost {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.loadDupe();\n  }\n\n  icon() {\n    return 'fas fa-flag';\n  }\n\n  descriptionKey() {\n    return 'blomstra-flag-duplicates.forum.post_stream.flagged_duplicate_text';\n  }\n\n  descriptionData() {\n    const data = {};\n\n    data.duplicate = this.dupe ? (\n      <Link href={app.route.discussion(this.dupe)}>{this.dupe.title()}</Link>\n    ) : this.dupeFail ? (\n      <code>{app.translator.trans('blomstra-flag-duplicates.forum.post_stream.not_found')}</code>\n    ) : (\n      <LoadingIndicator size=\"small\" display=\"inline\" />\n    );\n\n    return data;\n  }\n\n  loadDupe() {\n    const dupeId = this.attrs.post.content();\n    app.store\n      .find('discussions', dupeId)\n      .then((discussion) => {\n        this.dupe = discussion;\n\n        m.redraw();\n      })\n      .catch((e) => {\n        this.dupeFail = true;\n      });\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['flags/forum/components/FlagPostModal'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/Post'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/icon'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.extensions['fof-merge-discussions'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/DiscussionControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/withAttr'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/states/GlobalSearchState'];","import app from 'flarum/forum/app';\nimport Component from 'flarum/common/Component';\nimport { components } from '@fof-merge-discussions';\nimport Button from 'flarum/common/components/Button';\nimport withAttr from 'flarum/common/utils/withAttr';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Stream from 'flarum/common/utils/Stream';\nimport GlobalSearchState from 'flarum/forum/states/GlobalSearchState';\nimport type Mithril from 'mithril';\n\ninterface IAttrs {\n  discussion: Discussion;\n  reason: Stream<string>;\n  reasonDetail: Stream<string | number>;\n}\n\ninterface IState {\n  selectedDiscussion: Discussion | null;\n}\n\nexport default class DiscussionSearch extends Component<IAttrs, IState> {\n  search!: GlobalSearchState;\n\n  oninit(vnode: Mithril.Vnode<IAttrs, this>): void {\n    super.oninit(vnode);\n\n    this.state = {\n      selectedDiscussion: null,\n    };\n  }\n\n  oncreate(vnode: Mithril.VnodeDOM<IAttrs, this>): void {\n    super.oncreate(vnode);\n  }\n\n  view(): Mithril.Children {\n    const discussion = this.attrs.discussion;\n    this.search = new GlobalSearchState();\n\n    return (\n      <label className=\"checkbox\">\n        <input\n          type=\"radio\"\n          name=\"reason\"\n          checked={this.attrs.reason() === 'duplicate'}\n          value=\"duplicate\"\n          onclick={withAttr('value', this.attrs.reason)}\n        />\n        <strong>{app.translator.trans('blomstra-flag-duplicates.forum.flags.reason_duplicate_label')}</strong>\n        {app.translator.trans('blomstra-flag-duplicates.forum.flags.reason_duplicate_text')}\n\n        {this.attrs.reason() === 'duplicate' && (\n          <div class=\"FlagPostModal-DuplicateSearch\" data-result-selected={!!this.state.selectedDiscussion}>\n            <components.DiscussionSearch\n              state={this.search}\n              onSelect={((discussion: Discussion) => {\n                this.state.selectedDiscussion = discussion;\n                this.attrs.reasonDetail(discussion.id());\n                m.redraw();\n              }).bind(this)}\n              ignore={discussion.id()}\n            />\n\n            <div class=\"FlagPostModal-SelectedDuplicate\">\n              <Button\n                class=\"Button Button--icon\"\n                icon=\"fas fa-trash\"\n                aria-label={app.translator.trans('blomstra-flag-duplicates.forum.flags.deselect_discussion_a11y_label')}\n                onclick={() => {\n                  this.state.selectedDiscussion = null;\n                  this.attrs.reasonDetail('');\n                }}\n              />\n              <span>\n                {this.state.selectedDiscussion?.id()} ~ {this.state.selectedDiscussion?.title()}\n              </span>\n            </div>\n          </div>\n        )}\n      </label>\n    );\n  }\n}\n","import app from 'flarum/forum/app';\nimport DiscussionFlaggedDuplicatePost from './components/DiscussionFlaggedDuplicatePost';\nimport extendFlagModal from './extendFlagModal';\n\napp.initializers.add('blomstra/flag-duplicates', () => {\n  app.postComponents.discussionFlaggedDuplicate = DiscussionFlaggedDuplicatePost;\n  extendFlagModal();\n});\n","import app from 'flarum/forum/app';\nimport { extend, override } from 'flarum/common/extend';\nimport FlagPostModal from 'flarum/flags/forum/components/FlagPostModal';\nimport Post from 'flarum/forum/components/Post';\nimport Link from 'flarum/common/components/Link';\nimport type Mithril from 'mithril';\nimport icon from 'flarum/common/helpers/icon';\nimport { components } from '@fof-merge-discussions';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Flag from 'flarum/flags/forum/models/flag';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Button from 'flarum/common/components/Button';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport DiscussionSearch from './components/DiscussionSearch';\n\nexport default function extendFlagModal() {\n  extend(FlagPostModal.prototype, 'flagReasons', function (this: FlagPostModal, items: ItemList<Mithril.Children>) {\n    if (this.attrs.post?.number() !== 1 || this.success) return;\n\n    const discussion = this.attrs.post.discussion();\n\n    items.add('duplicate', <DiscussionSearch discussion={discussion} reason={this.reason} reasonDetail={this.reasonDetail} />, 100);\n  });\n\n  // Only required until https://github.com/flarum/core/pull/3260 is merged.\n  extend(FlagPostModal.prototype, ['oncreate', 'onupdate'], function () {\n    if (this.attrs.post?.number() !== 1) return;\n\n    this.$('.Search-clear').attr('type', 'button');\n    this.$('.Button[type=submit]').prop('disabled', (this.reason() === 'duplicate' && !this.reasonDetail()) || !this.reason());\n  });\n\n  extend(Post.prototype, 'flagActionItems', function (items: ItemList) {\n    const flags = this.attrs.post?.flags?.();\n\n    // If (at least) one of the flags here is `duplicate`, then we'll remove the `Delete` button and replace it with a `Merge` button.\n    flags.map((flag: Flag) => {\n      if (flag?.reason?.() === 'duplicate') {\n        const discussion = this.attrs.post.discussion();\n\n        items.remove('controls');\n        items.add(\n          'merge',\n          <Button\n            className=\"Button\"\n            icon=\"fas fa-code-branch fa-flip-vertical\"\n            disabled={!this.dupeDiscussion}\n            onclick={() => {\n              app.modal.show(components.DiscussionMergeModal, { discussion, preselect: this.dupeDiscussion });\n            }}\n          >\n            {app.translator.trans('fof-merge-discussions.forum.discussion.merge')}\n          </Button>,\n          5\n        );\n      }\n    });\n  });\n\n  override(Post.prototype, 'flagReason', function (original, flag: Flag) {\n    const orig = original(flag);\n\n    if (flag?.reason?.() === 'duplicate') {\n      if (this.flagsLoading || !this.dupeDiscussion) {\n        orig[1] = (\n          <span className=\"Post-flagged-detail\">\n            <LoadingIndicator size=\"small\" display=\"inline\" />\n          </span>\n        );\n\n        return orig;\n      }\n\n      const url = app.route.discussion(this.dupeDiscussion);\n\n      orig[1] = (\n        <span className=\"Post-flagged-detail\">\n          <Link href={url} external={true} target=\"_blank\">\n            {this.dupeDiscussion.title() || app.translator.trans('blomstra-flag-duplicates.forum.flags.duplicate_discussion')}{' '}\n            {icon('fas fa-external-link-alt')}{' '}\n          </Link>\n        </span>\n      );\n      return orig;\n    } else {\n      return orig;\n    }\n  });\n\n  extend(Post.prototype, 'oninit', function (this: Post) {\n    this.subtree?.check(() => this.dupeDiscussion?.freshness);\n  });\n\n  extend(Post.prototype, ['oninit', 'onupdate'], function (this: Post, vnode: Mithril.Vnode) {\n    const flags = this.attrs.post?.flags?.();\n\n    if (flags) {\n      this.flagsLoading = true;\n      flags.map((flag: Flag) => {\n        if (flag?.reason?.() === 'duplicate') {\n          const inStoreDiscussion = app.store.getById('discussion', flag.reasonDetail());\n\n          if (inStoreDiscussion) {\n            this.dupeDiscussion = inStoreDiscussion;\n          } else {\n            app.store.find('discussions', flag.reasonDetail()).then((discussion: Discussion) => {\n              this.dupeDiscussion = discussion;\n            });\n          }\n        }\n      });\n      this.flagsLoading = false;\n    }\n  });\n\n  extend(DiscussionControls, 'userControls', function (items: ItemList, discussion: Discussion) {\n    const post = discussion.firstPost();\n    if (!post || post.isHidden() || post.contentType() !== 'comment' || !post.canFlag()) return;\n\n    items.add(\n      'flag-dupe',\n      <Button icon=\"fas fa-flag\" onclick={() => app.modal.show(FlagPostModal, { post })}>\n        {app.translator.trans('flarum-flags.forum.post_controls.flag_button')}\n      </Button>,\n      0\n    );\n  });\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","create","constructor","DiscussionFlaggedDuplicatePost","oninit","vnode","this","loadDupe","icon","descriptionKey","descriptionData","data","duplicate","dupe","href","app","title","dupeFail","size","display","dupeId","attrs","post","content","then","discussion","m","redraw","e","EventPost","extensions","DiscussionSearch","search","state","selectedDiscussion","oncreate","view","GlobalSearchState","className","type","name","checked","reason","onclick","withAttr","class","components","onSelect","reasonDetail","id","bind","ignore","Component","extend","FlagPostModal","items","number","success","add","$","attr","Post","flags","map","flag","remove","disabled","dupeDiscussion","preselect","override","original","orig","flagsLoading","url","external","target","subtree","check","freshness","inStoreDiscussion","DiscussionControls","firstPost","isHidden","contentType","canFlag"],"sourceRoot":""}